"""
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
def is_palindrome(word: str) -> bool:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —Ä–∞–≤–Ω–æ —Å–≤–æ–µ–º—É –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
    return word[::-1] == word

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —Å–ª–æ–≤–µ "hello"
print(is_palindrome('hello'))

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ —É–º–Ω–æ–∂–µ–Ω–æ –Ω–∞ 2.
–ù–∞–ø—Ä–∏–º–µ—Ä,
–≤—Ö–æ–¥: [1, 2, 3]
–≤—ã—Ö–æ–¥: [2, 4, 6]

nums = [1,2,3]
x = map(lambda x: x *2, nums)
print(list(x))

#–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. –ò—Å–ø–æ–ª—å–∑—É—è filter –∏ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—é,
# –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤.
words = ['apple', 'bat', 'car', 'dolphin', 'egg']

x = filter(lambda a: len(a) > 4, words)
print(list(x))

#–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù—É–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ filter –∏ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
#–ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å–ø–∏—Å–∫–∞ [-3, 0, 5, -1, 8, -7] –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è [5, 8].

num = [-3,0,5,-1,8,-7]
x = filter(lambda a: a > 0, num)
print(list(x))

#–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é map —Å –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫,
# –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –≤–æ–∑–≤–µ–¥–µ–Ω–æ –≤ –∫—É–± (–≤ —Ç—Ä–µ—Ç—å—é —Å—Ç–µ–ø–µ–Ω—å).

num = [-3,0,5,-1,8,-7]
result = map(lambda x: x ** 3, num)
print(list(result))

#–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
# "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ", –µ—Å–ª–∏ —á–∏—Å–ª–æ > 0
# "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ", –µ—Å–ª–∏ —á–∏—Å–ª–æ < 0
# "–ù–æ–ª—å", –µ—Å–ª–∏ —á–∏—Å–ª–æ == 0

def num_da(num):
    if num > 0:
        return '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ'
    elif num < 0:
        return '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ'
    else:
        return '–ù–æ–ª—å'
print(num_da(-7))


#–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é is_leap_year(year: int) -> bool, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≥–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π, –∏–Ω–∞—á–µ False.
# –ü—Ä–∞–≤–∏–ª–∞ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ –≥–æ–¥–∞:
# –ì–æ–¥ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 4, –Ω–æ –Ω–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 100, –∏–ª–∏
# –ì–æ–¥ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 400.
# –ù–∞–ø—Ä–∏–º–µ—Ä:
# is_leap_year(2000) -> True
# is_leap_year(1900) -> False
# is_leap_year(2024) -> True
# is_leap_year(2023) -> False

def is_leap_year(year:int) -> bool:
    if year % 400 == 0:
        return True
    elif year % 100 == 0:
        return False
    elif year % 4 == 0:
        return True
    else:
        return False


print(is_leap_year(1900))

#–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
# –ù–∞–ø—Ä–∏–º–µ—Ä:
# sum_up_to(5) –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 15 (1+2+3+4+5).

def sum_up_to(num):
    total = 0
    for i in range(1, num + 1):  # –ø—Ä–æ—Ö–æ–¥–∏–º –æ—Ç 1 –¥–æ num –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        total = i + total        # –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—É–º–º—É
    return total

print(sum_up_to(5))  # –≤—ã–≤–æ–¥–∏—Ç 15

#–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Ä–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 4 —Å—Ç—Ä–æ–∫–∏ –Ω–∞ 7 —Å–∏–º–≤–æ–ª–æ–≤:
#######
#######
#######
#######

for i in range(4):
    for j in range(1,8):
        print('#', end='')
    print()

#–°–æ–∑–¥–∞–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä log_args, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è.

def log_args(func):
    def decorator(*args, **kwargs):
        # –í—ã–≤–æ–¥–∏–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        print(f'–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args} {kwargs}')
        result = func(*args, **kwargs)
        return result
    return decorator

@log_args
def greet(name_2):
    print('Hello', name_2)

greet('Isa')


#–ù–∞–ø–∏—à–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä benchmark, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç:
# –ü—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–ª–æ–∂–µ–Ω–∏–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö" –∏ —Ç.–¥.).
# –ó–∞—Å–µ–∫–∞—Ç—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
# –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ:

import time

def benchmark(operation_time):
    def decorator(func):
            def wrapper(*args, **kwargs):
                start = time.time()
                res = func(*args, **kwargs)
                end = time.time()
                print(f'–û–ø–µ—Ä–∞—Ü–∏—è: {operation_time} - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {end - start} —Å–µ–∫—É–Ω–¥')
                return res
            return wrapper
    return decorator

@benchmark('–°–ª–æ–∂–µ–Ω–∏–µ')
def add_numbers(a,b):
    return a + b

print(add_numbers(5,7))

#–ó–∞–¥–∞—á–∞ 1: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 20
# –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å List Comprehension, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∏–∑ —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 20.

x = [x for x in range(1, 21) if x % 2 == 0]
print(x)

#–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10, –≥–¥–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ '—á–µ—Ç–Ω–æ–µ', –∞ –Ω–µ—á—ë—Ç–Ω—ã–µ ‚Äî –Ω–∞ '–Ω–µ—á–µ—Ç–Ω–æ–µ'
for i in range(1, 21):
    if i % 2 == 0:
        print('—á')
    else:
        print('–Ω–µ')

x = ['–ß–µ—Ç–Ω–æ–µ' if i % 2 == 0 else '–ù–µ—á–µ—Ç–Ω–æ–µ' for i in range(1,11)]
print(x)


#–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª.
#x = map[lambda x: x if % 2 != 0 x ** 2 ]


for i in range(1, 11):
    if i % 2 != 0:
        res = i ** 2
        print(res)

x = [ i ** 2 for i in range(1,11) if i % 2 != 0 ]
print(x)


#üî∏ 1. –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "Fizz",
# –µ—Å–ª–∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3, "Buzz" ‚Äî –µ—Å–ª–∏ –Ω–∞ 5, –∏ "FizzBuzz", –µ—Å–ª–∏ –Ω–∞ 3 –∏ –Ω–∞ 5.

def fizz_buzz(num: int) -> str:
    if num % 3 == 0 and num % 5 == 0:
        return 'FizzBuzz'
    elif num % 3 == 0:
        return 'Fizz'
    elif num % 5 == 0:
        return 'Buzz'
    else:
        return str(num)

print(fizz_buzz(15))  # FizzBuzz
print(fizz_buzz(9))   # Fizz
print(fizz_buzz(10))  # Buzz
print(fizz_buzz(7))   # 7

#üî∏ 2. –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏

# –ó–∞–¥–∞—á–∞: –°–¥–µ–ª–∞–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏ —Å–æ–±–µ—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ.

def one_les(s):
    text = s.split()
    word = [text[::-1] for text in text]
    return ' '.join(word)

print(one_les('hello world'))

#üî∏ 3. –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ.

def filter_even(nums: list[int]) -> list[int]:
    return [num for num in nums if num % 2 == 0]


print(filter_even([1, 2, 3]))

#üî∏ 4. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
# –ù–∞—Ä–∏—Å—É–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ `#` —Ä–∞–∑–º–µ—Ä–æ–º 5 —Å—Ç—Ä–æ–∫ –∏ 10 —Å—Ç–æ–ª–±—Ü–æ–≤
# (–∏—Å–ø–æ–ª—å–∑—É–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã)

for i in range(5):
    for l in range(10):
        print("#", end=' ')
    print()


#üî∏ 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
# –ù–∞–ø–∏—à–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç "–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!" –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

def my_decorator(func):
    def wrapper(*args, **kwargs):
        print('–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞')
        res = func(*args, **kwargs)
        return res
    return wrapper



@my_decorator
def say_hello():
    print("Hello!")

say_hello()
# –û–∂–∏–¥–∞–µ—Ç—Å—è:
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!
# Hello!


def count_elements(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += 1
        else:
            result[item] = 1
    return result

print(count_elements(['a', 'b', 'a', 'c', 'b', 'a']))

#A pangram is a sentence that contains every single letter
# of the alphabet at least once. For example, the sentence
# "The quick brown fox jumps over the lazy dog" is a pangram,
# because it uses the letters A-Z at least once (case is irrelevant).
# Given a string, detect whether or not it is a pangram.
# Return True if it is, False if not. Ignore numbers and punctuation.

def is_pangram(st):
    sentence = st.lower()
    return all(sentence for i in string.ascii_letters if i in sentence)

print(is_pangram('The quick brown fox jumps over the lazy dog'))

#Implement a function which convert the given boolean value into its string representation.
# Note: Only valid inputs will be given.

def boolean_to_string(b):
    #your code here
    return str(b)

boolean_to_string(False)


#Some numbers have funny properties. For example:
# 89 --> 8¬π + 9¬≤ = 89 *
# 695 --> 6¬≤ + 9¬≥ + 5‚Å¥= 1390 = 695 *
# 46288 --> 4¬≥ + 6‚Å¥+ 2‚Åµ + 8‚Å∂ + 8‚Å∑ = 2360688 = 46288 * 51
# Given two positive integers n and p, we want to find a positive integer k, if it exists, such that the sum of the digits of n raised to consecutive powers starting from p is equal to k * n.
# In other words, writing the consecutive digits of n as a, b, c, d ..., is there an integer k such that :
# If it is the case we will return k, if not return -1.
# Note: n and p will always be strictly positive integers.

def dig_pow(n, p):
    # your code
    digits = str(n)
    total = 0
    for i, digit in enumerate(digits):
        total += int(digit) ** (p + i)
    if total % n == 0:
        return total // n
    else:
        return -1
print(dig_pow(92, 1))

#–ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ "—á–∏—Å–ª–∞ –ù–∞—Ä—Ü–∏—Å—Å–∞" (Armstrong numbers)
# –£—Å–ª–æ–≤–∏–µ:
# –ß–∏—Å–ª–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–æ–º (–∏–ª–∏ —á–∏—Å–ª–æ–º –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥–∞),
# –µ—Å–ª–∏ —Å—É–º–º–∞ –µ–≥–æ —Ü–∏—Ñ—Ä, –≤–æ–∑–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤ —Å—Ç–µ–ø–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä, —Ä–∞–≤–Ω–∞ —Å–∞–º–æ–º—É —á–∏—Å–ª—É.

def is_armstrong(n):
    digits_str = str(n)              # —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ '153'
    num_digits = len(digits_str)     # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä = 3
    total = 0
    for digit in digits_str:         # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏
        total += int(digit) ** num_digits
    return total == n

print(is_armstrong(153))   # True
print(is_armstrong(9474))  # True
print(is_armstrong(123))   # False


#Introduction
# The first century spans from the year 1 up to and including the year 100, the second
# century - from the year 101 up to and including the year 200, etc.
# Task
# Given a year, return the century it is in.

def century(year):
    # Finish this :)
    return (year + 99) // 100

print(century(1705))

#Welcome. In this kata, you are asked to square every digit of a number and concatenate them.
# For example, if we run 9119 through the function, 811181 will come out, because 92 is 81 and 12 is 1. (81-1-1-81)
# Example #2: An input of 765 will/should return 493625 because 72 is 49, 62 is 36, and 52 is 25. (49-36-25)
# Note: The function accepts an integer and returns an integer.
# Happy Coding!
def square_digits(num):
    # Your code here
    total = ''
    for i in str(num):
        i = int(i)
        total += str(i ** 2)
    return int(total)

print(square_digits(9119))


#Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.
# 39 --> 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit, there are 3 multiplications)
# 999 --> 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2, there are 4 multiplications)
# 4 --> 0 (because 4 is already a one-digit number, there is no multiplication)
def persistence(n):
    total = 0
    while n >= 10:
        prod = 1
        for i in str(n):
            prod *= int(i)
        n = prod
        total += 1
    return total

print(persistence(39))

#iven an array of integers as strings and numbers, return the sum of the array values as if all were numbers.
# Return your answer as a number.

def sum_mix(arr):
    #your code here
    return sum(int(n) for n in arr)

print(sum_mix([9, 3, '7', '3']))



#You were camping with your friends far away from home, but when it's time to go back,
# you realize that your fuel is running out and the nearest pump is 50 miles away! You know that on average,
# your car runs on about 25 miles per gallon. There are 2 gallons left.
# Considering these factors, write a function that tells you if it is possible to get to the pump or not.
# Function should return true if it is possible and false if not.

def zero_fuel(distance_to_pump, mpg, fuel_left):
    #Happy Coding! ;)
    return (True if mpg * fuel_left >= distance_to_pump else False)

print(zero_fuel(100, 50, 1))
def remove_every_other(my_list):
    return my_list[::2]

print(remove_every_other(["Keep", "Remove", "Keep", "Remove", "Keep"]))


import re
with open('', 'r') as file:
    data = file.read().strip()

res = re.findall(r'([a-zA-Z])', data)
doc = ''.join(char * int(num) for char, num in res)

with open('', 'w') as file:
    file.write(doc)





with open('', 'r') as file:
    data = file.read().lower().split()

word_counts = {}

for word in data:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1

# –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
most_common = max(word_counts.items(), key=lambda x: (x[1], -ord(x[0][0])))

# –í—Å–µ —Å–ª–æ–≤–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
max_freq = most_common[1]
candidates = [word for word, count in word_counts.items() if count == max_freq]

# –í—ã–≤–æ–¥–∏–º –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ —á–∞—Å—Ç–æ—Ç—É
result = min(candidates)
print(result, max_freq)


def find_uniq(arr):
    # your code here
    if arr[0] != arr[1] and arr[0] != arr[2]:
        return arr[0]
    elif arr[1] != arr[0] and arr[1] != arr[2]:
        return arr[1]

    com = arr[0]
    for num in arr:
        if num != com:
            return num

print(find_uniq([1, 1, 1, 2, 1, 1]))

def find_uniq(arr):
    uniq_set = set(arr)
    return [x for x in  uniq_set if arr.count(x) == 1][0]

print(find_uniq([1, 1, 1, 2, 1, 1]))



def number_to_string(num):
    return str(num)

print(number_to_string(123))


def friend(x):
    #Code
    return [i for i in x if len(i) == 4]

print(friend(["Ryan", "Kieran", "Jason", "Yous"]))



def summation(num):
    total = 0
    for i in range(1, num + 1):
        total += i
        print(f'{i}: {total}')
    return total

print(summation(10))

def summation(num):
    return sum(range(1, num + 1))
print(summation(5))

def litres(time):
    return int(time * 0.5)
print(litres(11.8))


def feast(beast, dish):
    # your code here
    return beast[0] == dish[0] and beast[-1] == dish[-1]

print(feast("great blue heron", "garlic naan"))



def area_or_perimeter(l , w):
    # return your answer
    return l * 2 + w *2 if l != w else l * w

print(area_or_perimeter(3, 3))
def count_sheep(n):
    # your code
    return ''.join(f"{i} sheep..." for i in range(1, n + 1)) if n > 0 else ''
print(count_sheep(5))



def min_max(lst):
  return [min(lst), max(lst)]


print(min_max([1]))

def cube_odd(arr):
    #your code here - return None if at least a value is not an integer
    total = 0
    for num in arr:
        if not isinstance(num, int) or isinstance(num, bool):
            return None
        if num % 2 != 0:
            num = num ** 3
            total += num
    return total
print(cube_odd([1, 2, 3,4,5]))

def cube_odd(arr):
    return sum(i**3 for i in arr if i % 2 != 0) if all(type(i) == int for i in arr) else None

print(cube_odd([1, 2, '3',4,5]))




def tower_builder(n_floors):
    tower = []
    width = n_floors * 2 - 1
    for i in range(1, n_floors + 1):
        stars = "*" *( 2 * i- 1)
        floor = stars.center(width)
        tower.append(floor)
    return tower


print(tower_builder(3))"""