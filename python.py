'''
#–ó–∞–¥–∞—á–∞ 1: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 20
# –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å List Comprehension, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∏–∑ —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 20.

x = [x for x in range(1, 21) if x % 2 == 0]
print(x)'''


'''
#–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10, –≥–¥–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ '—á–µ—Ç–Ω–æ–µ', –∞ –Ω–µ—á—ë—Ç–Ω—ã–µ ‚Äî –Ω–∞ '–Ω–µ—á–µ—Ç–Ω–æ–µ'
for i in range(1, 21):
    if i % 2 == 0:
        print('—á')
    else:
        print('–Ω–µ')

x = ['–ß–µ—Ç–Ω–æ–µ' if i % 2 == 0 else '–ù–µ—á–µ—Ç–Ω–æ–µ' for i in range(1,11)]
print(x)

'''



'''
#–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª.
#x = map[lambda x: x if % 2 != 0 x ** 2 ]


for i in range(1, 11):
    if i % 2 != 0:
        res = i ** 2
        print(res)

x = [ i ** 2 for i in range(1,11) if i % 2 != 0 ]
print(x)'''

'''

#üî∏ 1. –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "Fizz",
# –µ—Å–ª–∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3, "Buzz" ‚Äî –µ—Å–ª–∏ –Ω–∞ 5, –∏ "FizzBuzz", –µ—Å–ª–∏ –Ω–∞ 3 –∏ –Ω–∞ 5.

def fizz_buzz(num: int) -> str:
    if num % 3 == 0 and num % 5 == 0:
        return 'FizzBuzz'
    elif num % 3 == 0:
        return 'Fizz'
    elif num % 5 == 0:
        return 'Buzz'
    else:
        return str(num)

print(fizz_buzz(15))  # FizzBuzz
print(fizz_buzz(9))   # Fizz
print(fizz_buzz(10))  # Buzz
print(fizz_buzz(7))   # 7

#üî∏ 2. –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏

# –ó–∞–¥–∞—á–∞: –°–¥–µ–ª–∞–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏ —Å–æ–±–µ—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ.

def one_les(s):
    text = s.split()
    word = [text[::-1] for text in text]
    return ' '.join(word)

print(one_les('hello world'))

#üî∏ 3. –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ.

def filter_even(nums: list[int]) -> list[int]:
    return [num for num in nums if num % 2 == 0]


print(filter_even([1, 2, 3]))

#üî∏ 4. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
# –ù–∞—Ä–∏—Å—É–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ `#` —Ä–∞–∑–º–µ—Ä–æ–º 5 —Å—Ç—Ä–æ–∫ –∏ 10 —Å—Ç–æ–ª–±—Ü–æ–≤
# (–∏—Å–ø–æ–ª—å–∑—É–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã)

for i in range(5):
    for l in range(10):
        print("#", end=' ')
    print()


#üî∏ 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
# –ù–∞–ø–∏—à–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç "–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!" –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

def my_decorator(func):
    def wrapper(*args, **kwargs):
        print('–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞')
        res = func(*args, **kwargs)
        return res
    return wrapper



@my_decorator
def say_hello():
    print("Hello!")

say_hello()
# –û–∂–∏–¥–∞–µ—Ç—Å—è:
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!
# Hello!


def count_elements(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += 1
        else:
            result[item] = 1
    return result

print(count_elements(['a', 'b', 'a', 'c', 'b', 'a']))'''

